#include<iostream>
#include<vector>
using namespace std;

template<typename T> //定义一个模板参数列表
bool compare(T a, T b) {  //compare是一个函数模板
	cout << "template compare" << endl;
	return a > b;
}

//针对compare函数模板 提供const char*类型的特例化版本
template<>
bool compare<const char*>(const char* a, const char* b) {
	cout << "compare<const char*>" << endl;
	return strcmp(a, b);
}

//非模板函数
bool compare(const char* a, const char* b) {
	cout << "normal compare" << endl;
	return strcmp(a, b);
}

int main() {
	//模板名 + 类型名才是一个函数名
	//在函数调用点，编译器用用户指定的类型，从原模板实例化一份函数代码出来
	compare<int>(10, 20);
	//bool compare<int> (int a, int b) {  
	//	cout << "template compare" << endl;
	//	return a > b;
	//}
	compare<double>(10.5, 20.5);

	//模板的实参推演 与传入int实例化的模板函数一样 不会再生成一次 否则就重定义了
	compare(10, 20); 
	compare<int>(30, 40.5);

	//函数模板实参的推演 T -> const char*
	//只是在比较地址的大小 没有意义 应该用strcmp进行比较
	//对于某些类型来说 依赖编译器默认实例化的模板代码 代码处理逻辑有错误
	compare("aaa", "bbb");

	return 0;
}
