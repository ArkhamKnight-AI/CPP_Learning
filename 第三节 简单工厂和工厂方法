#include<iostream>
#include<string>
using namespace std;

/*
简单工厂 Simple Factory
工厂方法 Factory Method
抽象工厂 Abstract Factory
工厂模式：主要封装了对象的创建
*/
class Car {
public:
	Car(string name) : _name(name) {}
	virtual void show() = 0;

protected:
	string _name;
};

class Bmw : public Car {
public:
	Bmw(string name) : Car(name) {}
	void show() {
		cout << "获取了一辆宝马汽车:" << _name << endl;
	}
};

class Audi : public Car {
public:
	Audi(string name) : Car(name) {}

	void show() {
		cout << "获取了一辆奥迪汽车:" << _name << endl;
	}
};

enum CarType {
	BMW, AUDI
};

//简单工厂 不符合软件设计的"开-闭"原则
//开闭原则 -> 对修改关闭，对扩展开放
#if 0
class SimpleFactory {
public:
	Car* createCar(CarType ct) {
		switch (ct) {
		case BMW:
			return new Bmw("X1");
			break;
		case AUDI:
			return new Audi("A6");
			break;
		default:
			cerr << "传入工厂的参数不正确" << endl;
			break;
		}
		return nullptr;
	}
};
#endif

//工厂方法 用具体工厂生成具体汽车
class Factory {
public:
	virtual Car* createCar(string name) = 0;

};

//宝马工厂
class BMWFactory : public Factory {
public:
	Car* createCar(string name) {
		return new Bmw(name);
	}
};

//奥迪工厂
class AudiFactory : public Factory {
public:
	Car* createCar(string name) {
		return new Audi(name);
	}
};

int main() {
	//unique_ptr<SimpleFactory> factory(new SimpleFactory());
	unique_ptr<Factory> bmwfty(new BMWFactory());
	unique_ptr<Factory> audifty(new AudiFactory());
	unique_ptr<Car> p1(bmwfty->createCar("X6"));
	unique_ptr<Car> p2(audifty->createCar("A8"));
	p1->show();
	p2->show();

	return 0;
}
