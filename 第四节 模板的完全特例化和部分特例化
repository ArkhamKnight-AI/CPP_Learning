#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

/*
模板的完全特例化和非完全(部分)特例化
模板的实惨推演
*/

template<typename T>
bool compare(T a, T b) {
	cout << "template compare" << endl;
	return a > b;
}

//完全特例化
template<>
bool compare(const char* a, const char* b) {
	cout << "template<const char*>" << endl;
	return strcmp(a, b);
}

template<typename T>
class Vector {
public:
	Vector() { cout << "call Vector template init " << endl; }
};

//这个是对char*类型提供的完全特例化版本
template<> //所有类型都是已知的
class Vector<char*> {
public:
	Vector() { cout << "call Vector<char*> init " << endl; }
};

//目前只知道 针对指针类型要重写itit方法 但是不知道是什么类型的指针
//针对指针类型提供的部分特例化版本
template<typename Ty>
class Vector<Ty*> {
public:
	Vector() { cout << "call Vector<Ty*> init " << endl; }
};

//针对函数指针(有返回值，有两个形参)提供的部分特例化
template<typename R, typename A1, typename A2>
class Vector<R(*)(A1, A2)> {
public:
	Vector() { cout << "call Vector<R(*)(A1, A2)> init " << endl; }
};

int sum(int a, int b) { return a + b; }

//针对函数类型(有一个返回值，两个形参)提供的部分特例化
template<typename R, typename A1, typename A2>
class Vector<R(A1, A2)> {
public:
	Vector() { cout << "call Vector<R(A1, A2)> init " << endl; }
};

//T包含了所有大的类型 返回值 所有形参都取出来
template<typename T>
void func1(T a) {
	cout << typeid(T).name() << endl;
}

//可以得到返回值类型、所有形参的类型 参数a就是这个函数的函数指针变量
template<typename R, typename A1, typename A2>
void func2(R(*a)(A1, A2)) {
	cout << typeid(R).name() << endl;
	cout << typeid(A1).name() << endl;
	cout << typeid(A2).name() << endl;
}

//定义一个类
class Test {
public:
	int sum(int a, int b) { return a + b; }
};

//可以得到类中成员函数的返回值类型、所有形参的类型 参数a就是这个成员函数的函数指针变量
template<typename R, typename T, typename A1, typename A2>
void func3(R(T::*a)(A1, A2)) {
	cout << typeid(R).name() << endl;
	cout << typeid(T).name() << endl;
	cout << typeid(A1).name() << endl;
	cout << typeid(A2).name() << endl;
}



int main() 
{
	Vector<int> vec1;
	Vector<char*> vec2;
	Vector<int*> vec3;
	Vector<int(*)(int, int)> vec4; //用函数指针类型特例化优先使用部分特例化
	Vector<int(int, int)> vec5; //用函数类型特例化优先使用部分特例化

	//区分函数类型和函数指针类型
	//函数指针的typedef定义方式
	typedef int(*PFUNC1)(int, int); //将返回值为int类型 2个形参变量类型都为int的函数指针类型定义为PFUNC1
	PFUNC1 pfunc1 = sum; 
	cout << pfunc1(10, 20) << endl;

	//函数的typedef定义方式
	typedef int PFUNC2(int, int);
	PFUNC2* pfunc2 = sum;
	cout << pfunc2(10, 20) << endl;

	//func1(10);
	//func1("aaa");
	func1(sum);
	func2(sum);
	func1(&Test::sum);
	func3(&Test::sum);

	return 0;
}
