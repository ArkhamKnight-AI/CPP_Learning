#include<iostream>
#include<memory>
#include<string>
using namespace std;

//装饰器模式
class Car {
public:
	virtual void show() = 0;
};

//三个实体的汽车类
class Bmw : public Car {
	void show() {
		cout << "这是一辆宝马汽车，配置有：基本配置";
	}
};

class Audi : public Car {
	void show() {
		cout << "这是一辆奥迪汽车，配置有：基本配置";
	}
};

class Benz : public Car {
	void show() {
		cout << "这是一辆奔驰汽车，配置有：基本配置";
	}
};

//装饰器基类 有公共方法才需要 没有的话不需要
//class CarDecorator : public Car {
//public:
//	//需要传入参数 确认被装饰的对象
//	CarDecorator(Car* p) :pCar(p) {}
//
//private:
//	Car* pCar;
//};

//装饰器1 定速巡航
class ConcreteDecorator01 : public Car {
public:
	ConcreteDecorator01(Car* p): pCar(p){}
	void show() {
		pCar->show();
		cout << ",定速巡航";
	}
private:
	Car* pCar;
};

//装饰器2 自动刹车
class ConcreteDecorator02 : public Car {
public:
	ConcreteDecorator02(Car* p) : pCar(p) {}
	void show() {
		pCar->show();
		cout << ",自动刹车";
	}
private:
	Car* pCar;
};

//装饰器3 车道偏离
class ConcreteDecorator03 : public Car {
public:
	ConcreteDecorator03(Car* p) : pCar(p) {}
	void show() {
		pCar->show();
		cout << ",车道偏离";
	}
private:
	Car* pCar;
};

int main() {
	//给Bmw装饰了自动巡航功能
	Car* p1 = new ConcreteDecorator01(new Bmw());
	//继续给Bmw装饰自动刹车的功能
	p1 = new ConcreteDecorator02(p1);
	p1 = new ConcreteDecorator03(p1);
	p1->show();
	cout << endl;

	//给Audi装饰了自动刹车功能
	Car* p2 = new ConcreteDecorator02(new Audi());
	p2->show();
	cout << endl;

	//给Benz装饰了车道偏离功能
	Car* p3 = new ConcreteDecorator03(new Benz());
	p3->show();
	cout << endl;

	return 0;
}
