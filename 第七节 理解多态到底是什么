#include<iostream>
#include<typeinfo>
#include<string>
using namespace std;

/*
如何理解多态
*/


//动物的基类
class Animal {
public:
	Animal(string name) : _name(name) {}
	virtual void bark() {}

protected:
	string _name;
};

//猫类
class Cat : public Animal {
public:
	Cat(string name) : Animal(name){}
	void bark() { cout << _name << " bark: miao miao!" << endl; }
};

//狗类
class Dog : public Animal {
public:
	Dog(string name) : Animal(name) {}
	void bark() { cout << _name << " bark: wang wang!" << endl; }
};

//猪类
class Pig : public Animal {
public:
	Pig(string name) : Animal(name) {}
	void bark() { cout << _name << " bark: heng heng!" << endl; }
};


/*
下面一组API接口无法做到软件涉及要求的"开-闭"原则
"开-闭"原则：对修改关闭，对扩展开放
*/
//void bark(Cat& cat) {
//	cat.bark();
//}
//
//void bark(Dog& dog) {
//	dog.bark();
//}
//
//void bark(Pig& pig) {
//	pig.bark();
//}

void bark(Animal* p) {
	p->bark(); //Animal::bark()是虚函数 动态绑定了
	//p->cat cat vftable &Cat::bark
	//p->dog dog vftable &Dog::bark
	//p->pig pig vftable &Pig::bark
}

int main() {
	Cat cat("猫咪");
	Dog dog("二哈");
	Pig pig("佩奇");

	//动态多态
	bark(&cat);
	bark(&dog);
	bark(&pig);

	return 0;
}
